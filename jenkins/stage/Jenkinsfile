/*
 * To use the following functionality:
 * withCredentials([file(credentialsId: 'platforms_stage_config_yml', variable: 'CONFIG_FILE')]) {
 *
 * The 'Pipeline Utility Steps' plugin must be installed on your Jenkins instance.
 *
 * Installation Guide:
 * 1. Log in to your Jenkins instance.
 * 2. Navigate to 'Manage Jenkins' from the main dashboard.
 * 3. Click on 'Manage Plugins'.
 * 4. Go to the 'Available plugins' tab.
 * 5. In the search box, type 'Pipeline Utility Steps'.
 * 6. Select the 'Pipeline Utility Steps' plugin from the list.
 * 7. Click on 'Install without restart' or 'Install and restart' to install the plugin.
 * 8. Once the plugin is installed, you can use functions like 'readYaml' and other utility steps in your Jenkinsfile.
 *
 * Ensure the plugin is up-to-date to avoid compatibility issues.
 */

def FAILED_STAGE = ""

pipeline {
    agent any

    triggers {
        githubPush()
    }

    stages {
        stage('Load Environment Variables') {
            steps {
                script {
                    FAILED_STAGE = env.STAGE_NAME
                }
                withCredentials([file(credentialsId: 'members_stage_config_yml', variable: 'CONFIG_FILE')]) {
                    script {
                        loadEnvironmentVariables(env.CONFIG_FILE)
                    }
                }
            }
        }

        stage('Concurrent Pre-Build Steps') {
            parallel {
                stage('Get Git Change Log') {
                    steps {
                        script {
                            FAILED_STAGE = env.STAGE_NAME
                            env.GIT_CHANGELOG = getChangeLog()
                        }
                    }
                }

                stage('PostgreSQL Backup') {
                    steps {
                        script {
                            FAILED_STAGE = env.STAGE_NAME
                            backupPostgres()
                        }
                    }
                }

                stage('Docker Hub Login') {
                    steps {
                        script {
                            FAILED_STAGE = env.STAGE_NAME
                            dockerLogin()
                        }
                    }
                }

                stage('Determine Containers') {
                    steps {
                        script {
                            FAILED_STAGE = env.STAGE_NAME
                            determineContainers()
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    buildAndPushDockerImage()
                }
            }
        }

        stage('Deploy New Instance') {
            steps {
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    deployNewInstance()
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    performHealthCheck()
                }
            }
        }

        stage('Switch Traffic and Cleanup') {
            steps {
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    switchTrafficAndCleanup()
                }
            }
        }
    }

    post {
        success {
            script {
                sendBuildNotification(":rocket: Deployment completed successfully", env.NOTIFICATION_COLOR_SUCCESS)
            }
        }
        failure {
            script {
                sendBuildNotification(":scream_cat: Deployment failed in stage *${FAILED_STAGE}*", env.NOTIFICATION_COLOR_FAILURE)
            }
        }
    }
}

def sendBuildNotification(String message, String color) {
    def jobUrl = "${env.JENKINS_DOMAIN}/job/${env.JOB_NAME}"
    def consoleOutputUrl = "${jobUrl}/${env.BUILD_NUMBER}/console"
    def changelog = env.GIT_CHANGELOG

    def jsonSlurper = new JsonSlurper()
    def notificationPlatforms = jsonSlurper.parseText(env.NOTIFICATION_PLATFORMS_JSON)

    notificationPlatforms.each { notification ->
        if (notification.enabled.toBoolean()) {
            def platform = notification.platform ? notification.platform.trim().toLowerCase() : ""
            echo "Processing notification for platform: '${platform}'"

            def payload = []
            switch (platform) {
                case 'slack':
                    payload = createSlackPayload(message, color, jobUrl, consoleOutputUrl, changelog)
                    break
                case 'discord':
                    payload = createDiscordPayload(message, color, jobUrl, consoleOutputUrl, changelog)
                    break
                default:
                    echo "Unsupported or undefined notification platform: '${platform}'"
            }

            if (payload) {
                def payloadJson = JsonOutput.toJson(payload)
                sendHttpPostRequest(notification.'webhook-url', payloadJson)
            }
        }
    }
}

def createSlackPayload(String message, String color, String jobUrl, String consoleOutputUrl, String changelog) {
    return [
        blocks: [
            [
                type: "section",
                text: [
                    type: "mrkdwn",
                    text: message
                ]
            ]
        ],
        attachments: [
            [
                color: color,
                blocks: [
                    [
                        type: "section",
                        text: [
                            type: "mrkdwn",
                            text: "*Change Log:*\n${changelog}"
                        ]
                    ],
                    [
                        type: "actions",
                        elements: [
                            [
                                type: "button",
                                text: [
                                    type: "plain_text",
                                    text: "Job",
                                    emoji: true
                                ],
                                url: jobUrl,
                                value: "click_job"
                            ],
                            [
                                type: "button",
                                text: [
                                    type: "plain_text",
                                    text: "Console Output",
                                    emoji: true
                                ],
                                url: consoleOutputUrl,
                                value: "click_console_output"
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]
}

def createDiscordPayload(String message, String color, String jobUrl, String consoleOutputUrl, String changelog) {
    return [
        embeds: [
            [
                title: message,
                color: parseColor(color),
                description: "*Change Log:*\n${changelog}\n\n[Job](${jobUrl}) | [Console Output](${consoleOutputUrl})",
            ]
        ]
    ]
}

def parseColor(String hexColor) {
    // Discord requires the color in decimal format
    return Integer.parseInt(hexColor.replace("#", ""), 16)
}

def sendHttpPostRequest(String url, String payload) {
    def CONTENT_TYPE_JSON = 'application/json'
    def HTTP_POST = 'POST'

    sh """
        curl -X ${HTTP_POST} \\
            -H 'Content-type: ${CONTENT_TYPE_JSON}' \\
            --data '${payload}' \\
            ${url}
    """
}

def loadEnvironmentVariables(String configFile) {
    def config = readYaml(file: configFile)

    env.JENKINS_DOMAIN = config.'jenkins-domain'
    env.NOTIFICATION_COLOR_SUCCESS = config.notifications.common.'color-success'
    env.NOTIFICATION_COLOR_FAILURE = config.notifications.common.'color-failure'
    env.NOTIFICATION_PLATFORMS_JSON = JsonOutput.toJson(config.notifications.platforms)

    env.PG_USER = config.postgresql.user
    env.PG_PASSWORD = config.postgresql.password
    env.BACKUP_DIR = config.postgresql.'backup-dir'

    env.DOCKER_HUB_REPO = config.dockerhub.repo
    env.DOCKER_HUB_USER = config.dockerhub.user
    env.DOCKER_HUB_PASSWORD = config.dockerhub.password

    env.EXTERNAL_SERVER_CONFIG_PATH = config.'external-server'.'config-path'
    env.EXTERNAL_SERVER_CLOUD_PATH = config.'external-server'.'cloud-path'
    env.EXTERNAL_SERVER_LOGS_PATH = config.'external-server'.'logs-path'

    env.INTERNAL_SERVER_CONFIG_PATH = config.'internal-server'.'config-path'
    env.INTERNAL_SERVER_CLOUD_PATH = config.'internal-server'.'cloud-path'
    env.INTERNAL_SERVER_LOGS_PATH = config.'internal-server'.'logs-path'

    env.BLUE_CONTAINER = config.containers.blue
    env.GREEN_CONTAINER = config.containers.green
    env.BLUE_URL = config.containers.'blue-url'
    env.GREEN_URL = config.containers.'green-url'
    env.IMAGE_NAME = config.containers.'image-name'

    env.APPLICATION_NETWORK = config.networks.application
    env.MONITORING_NETWORK = config.networks.monitoring

    env.PROFILE = config.spring.profile
    env.PORT_A = config.spring.'port-a'.toString()
    env.PORT_B = config.spring.'port-b'.toString()

    env.WHITELIST_ADMIN_USERNAME = config.admin.username
    env.WHITELIST_ADMIN_PASSWORD = config.admin.password

    env.DOCKERFILE_PATH = "${env.WORKSPACE}${config.docker.'dockerfile-path'}"
    env.NGINX_CONTAINER_NAME = config.docker.'nginx-container-name'
    env.POSTGRESQL_CONTAINER_NAME = config.docker.'postgresql-container-name'
}

def getChangeLog() {
    def previousCommit = env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'
    def currentCommit = env.GIT_COMMIT ?: 'HEAD'

    def changeLog = sh(
        script: "git log ${previousCommit}..${currentCommit} --pretty=format:\"* %h - %s (%an)\" --abbrev-commit",
        returnStdout: true
    ).trim()

    def lines = changeLog.split('\n')
    if (lines.size() > 10) {
        changeLog = lines.take(10).join('\n') + '\n... (truncated)'
    }

    return changeLog
}

def backupPostgres() {
    def BACKUP_FILE = "postgres_backup_${new Date().format('yyyy-MM-dd_HH-mm-ss')}.sql"
    sh """
        echo "Backing up PostgreSQL database to ${env.BACKUP_DIR}/${BACKUP_FILE}..."
        docker exec -e PGPASSWORD=${env.PG_PASSWORD} ${env.POSTGRESQL_CONTAINER_NAME} sh -c 'pg_dumpall -c -U ${env.PG_USER} > ${env.BACKUP_DIR}/${BACKUP_FILE}'
    """
}

def dockerLogin() {
    sh """
        echo "Logging in to Docker Hub..."
        echo "${env.DOCKER_HUB_PASSWORD}" | docker login -u "${env.DOCKER_HUB_USER}" --password-stdin
    """
}

def determineContainers() {
    script {
        def blueRunning = sh(script: "docker ps --filter 'name=${env.BLUE_CONTAINER}' --format '{{.Names}}' | grep -q '${env.BLUE_CONTAINER}'", returnStatus: true) == 0
        if (blueRunning) {
            env.CURRENT_CONTAINER = env.BLUE_CONTAINER
            env.DEPLOY_CONTAINER = env.GREEN_CONTAINER
            env.NEW_TARGET = env.GREEN_URL
            env.NEW_PORT = env.PORT_B
            env.OLD_PORT = env.PORT_A
        } else {
            env.CURRENT_CONTAINER = env.GREEN_CONTAINER
            env.DEPLOY_CONTAINER = env.BLUE_CONTAINER
            env.NEW_TARGET = env.BLUE_URL
            env.NEW_PORT = env.PORT_A
            env.OLD_PORT = env.PORT_B
        }
        echo "Current container is ${env.CURRENT_CONTAINER}, deploying to ${env.DEPLOY_CONTAINER} on port ${env.NEW_PORT}."
    }
}

def buildAndPushDockerImage() {
    sh """
        DOCKER_BUILDKIT=1 docker build -f ${env.DOCKERFILE_PATH} -t ${env.IMAGE_NAME}:${env.DEPLOY_CONTAINER} .
        docker tag ${env.IMAGE_NAME}:${env.DEPLOY_CONTAINER} ${env.DOCKER_HUB_REPO}:${env.DEPLOY_CONTAINER}
        docker push ${env.DOCKER_HUB_REPO}:${env.DEPLOY_CONTAINER}
        docker logout
    """
}

def deployNewInstance() {
    sh """
        echo "Stopping and removing existing container if it exists"
        if docker ps | grep -q ${env.DEPLOY_CONTAINER}; then
            docker stop ${env.DEPLOY_CONTAINER}
            docker rm ${env.DEPLOY_CONTAINER}
        fi

        echo "Running new container ${env.DEPLOY_CONTAINER} with image ${env.IMAGE_NAME}:${env.DEPLOY_CONTAINER}"
        docker run -d --name ${env.DEPLOY_CONTAINER} \\
            -p ${env.NEW_PORT}:8080 \\
            --network ${env.APPLICATION_NETWORK} \\
            -v ${env.EXTERNAL_SERVER_CONFIG_PATH}:${env.INTERNAL_SERVER_CONFIG_PATH} \\
            -v ${env.EXTERNAL_SERVER_CLOUD_PATH}:${env.INTERNAL_SERVER_CLOUD_PATH} \\
            -v ${env.EXTERNAL_SERVER_LOGS_PATH}:${env.INTERNAL_SERVER_LOGS_PATH} \\
            -e LOG_PATH=${env.INTERNAL_SERVER_LOGS_PATH} \\
            -e SPRING_PROFILES_ACTIVE=${env.PROFILE} \\
            ${env.IMAGE_NAME}:${env.DEPLOY_CONTAINER}

        echo "Checking if monitoring network ${env.MONITORING_NETWORK} exists"
        if docker network ls --format '{{.Name}}' | grep -q '^${env.MONITORING_NETWORK}\$'; then
            echo "Connecting to monitoring network ${env.MONITORING_NETWORK}"
            docker network connect ${env.MONITORING_NETWORK} ${env.DEPLOY_CONTAINER}
        else
            echo "Monitoring network ${env.MONITORING_NETWORK} does not exist. Skipping connection."
        fi

        echo "Listing all containers"
        docker ps -a
    """
}

def performHealthCheck() {
    def PUBLIC_IP = sh(script: "curl -s ifconfig.me", returnStdout: true).trim()
    echo "Public IP address: ${PUBLIC_IP}"

    def start_time = System.currentTimeMillis()
    def timeout = start_time + 150000  // 2.5 minutes

    while (System.currentTimeMillis() < timeout) {
        def elapsed = (System.currentTimeMillis() - start_time) / 1000
        echo "Checking health... ${elapsed} seconds elapsed."
        def status = sh(
            script: """curl -s -u ${env.WHITELIST_ADMIN_USERNAME}:${env.WHITELIST_ADMIN_PASSWORD} \
                http://${PUBLIC_IP}:${env.NEW_PORT}/actuator/health | grep 'UP'""",
            returnStatus: true
        )
        if (status == 0) {
            echo "New application started successfully after ${elapsed} seconds."
            return
        }
        sleep 5
    }

    if (System.currentTimeMillis() >= timeout) {
        sh "docker stop ${env.DEPLOY_CONTAINER}"
        sh "docker rm ${env.DEPLOY_CONTAINER}"
        error "Health check failed"
    }
}

def switchTrafficAndCleanup() {
    sh """
        echo "Switching traffic to ${env.DEPLOY_CONTAINER} on port ${env.NEW_PORT}."
        docker exec ${env.NGINX_CONTAINER_NAME} bash -c '
            export BACKEND_URL=${env.NEW_TARGET}
            envsubst "\\\$BACKEND_URL" < /etc/nginx/conf.d/members.conf.template > /etc/nginx/conf.d/members.conf
        '
        docker exec ${env.NGINX_CONTAINER_NAME} sed -i 's/${env.OLD_PORT}/${env.NEW_PORT}/' /etc/nginx/conf.d/members.conf
        docker exec ${env.NGINX_CONTAINER_NAME} nginx -t
        docker exec ${env.NGINX_CONTAINER_NAME} nginx -s reload

        echo "Checking if current container ${env.CURRENT_CONTAINER} is running..."
        if docker ps | grep -q ${env.CURRENT_CONTAINER}; then
            docker stop ${env.CURRENT_CONTAINER}
            docker rm ${env.CURRENT_CONTAINER}
            echo "Removed old container ${env.CURRENT_CONTAINER}."
        fi
    """
}
